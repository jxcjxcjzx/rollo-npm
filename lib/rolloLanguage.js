module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = "let",
        peg$c1 = { type: "literal", value: "let", description: "\"let\"" },
        peg$c2 = "speed",
        peg$c3 = { type: "literal", value: "speed", description: "\"speed\"" },
        peg$c4 = "waitForTap",
        peg$c5 = { type: "literal", value: "waitForTap", description: "\"waitForTap\"" },
        peg$c6 = "waitForHit",
        peg$c7 = { type: "literal", value: "waitForHit", description: "\"waitForHit\"" },
        peg$c8 = "wait",
        peg$c9 = { type: "literal", value: "wait", description: "\"wait\"" },
        peg$c10 = "delay",
        peg$c11 = { type: "literal", value: "delay", description: "\"delay\"" },
        peg$c12 = "go",
        peg$c13 = { type: "literal", value: "go", description: "\"go\"" },
        peg$c14 = "turn",
        peg$c15 = { type: "literal", value: "turn", description: "\"turn\"" },
        peg$c16 = "turnRight",
        peg$c17 = { type: "literal", value: "turnRight", description: "\"turnRight\"" },
        peg$c18 = "right",
        peg$c19 = { type: "literal", value: "right", description: "\"right\"" },
        peg$c20 = "turnLeft",
        peg$c21 = { type: "literal", value: "turnLeft", description: "\"turnLeft\"" },
        peg$c22 = "left",
        peg$c23 = { type: "literal", value: "left", description: "\"left\"" },
        peg$c24 = "flash",
        peg$c25 = { type: "literal", value: "flash", description: "\"flash\"" },
        peg$c26 = "color",
        peg$c27 = { type: "literal", value: "color", description: "\"color\"" },
        peg$c28 = "pulse",
        peg$c29 = { type: "literal", value: "pulse", description: "\"pulse\"" },
        peg$c30 = "log",
        peg$c31 = { type: "literal", value: "log", description: "\"log\"" },
        peg$c32 = "say",
        peg$c33 = { type: "literal", value: "say", description: "\"say\"" },
        peg$c34 = "gosub",
        peg$c35 = { type: "literal", value: "gosub", description: "\"gosub\"" },
        peg$c36 = "call",
        peg$c37 = { type: "literal", value: "call", description: "\"call\"" },
        peg$c38 = "loop",
        peg$c39 = { type: "literal", value: "loop", description: "\"loop\"" },
        peg$c40 = "repeat",
        peg$c41 = { type: "literal", value: "repeat", description: "\"repeat\"" },
        peg$c42 = "sub",
        peg$c43 = { type: "literal", value: "sub", description: "\"sub\"" },
        peg$c44 = "if",
        peg$c45 = { type: "literal", value: "if", description: "\"if\"" },
        peg$c46 = "while",
        peg$c47 = { type: "literal", value: "while", description: "\"while\"" },
        peg$c48 = "do",
        peg$c49 = { type: "literal", value: "do", description: "\"do\"" },
        peg$c50 = "until",
        peg$c51 = { type: "literal", value: "until", description: "\"until\"" },
        peg$c52 = "stop",
        peg$c53 = { type: "literal", value: "stop", description: "\"stop\"" },
        peg$c54 = "turnAround",
        peg$c55 = { type: "literal", value: "turnAround", description: "\"turnAround\"" },
        peg$c56 = "reverse",
        peg$c57 = { type: "literal", value: "reverse", description: "\"reverse\"" },
        peg$c58 = "pointMe",
        peg$c59 = { type: "literal", value: "pointMe", description: "\"pointMe\"" },
        peg$c60 = [],
        peg$c61 = peg$FAILED,
        peg$c62 = /^[0-9.]/,
        peg$c63 = { type: "class", value: "[0-9.]", description: "[0-9.]" },
        peg$c64 = function(n) { return parseInt(n.join("")); },
        peg$c65 = "0x",
        peg$c66 = { type: "literal", value: "0x", description: "\"0x\"" },
        peg$c67 = /^[0-9a-fA-F]/,
        peg$c68 = { type: "class", value: "[0-9a-fA-F]", description: "[0-9a-fA-F]" },
        peg$c69 = function(n1, n2) { return parseInt(n1 + n2.join("")); },
        peg$c70 = "time",
        peg$c71 = { type: "literal", value: "time", description: "\"time\"" },
        peg$c72 = null,
        peg$c73 = "s",
        peg$c74 = { type: "literal", value: "s", description: "\"s\"" },
        peg$c75 = "%",
        peg$c76 = { type: "literal", value: "%", description: "\"%\"" },
        peg$c77 = "second",
        peg$c78 = { type: "literal", value: "second", description: "\"second\"" },
        peg$c79 = "degree",
        peg$c80 = { type: "literal", value: "degree", description: "\"degree\"" },
        peg$c81 = /^[a-zA-Z]/,
        peg$c82 = { type: "class", value: "[a-zA-Z]", description: "[a-zA-Z]" },
        peg$c83 = /^[a-zA-Z0-9]/,
        peg$c84 = { type: "class", value: "[a-zA-Z0-9]", description: "[a-zA-Z0-9]" },
        peg$c85 = function(s, s2) { return s + s2.join(""); },
        peg$c86 = /^[a-zA-Z0-9 ]/,
        peg$c87 = { type: "class", value: "[a-zA-Z0-9 ]", description: "[a-zA-Z0-9 ]" },
        peg$c88 = function(s) { return s.join(""); },
        peg$c89 = " ",
        peg$c90 = { type: "literal", value: " ", description: "\" \"" },
        peg$c91 = function(c, l, b) { return { number: line(), line: [c, l, b] }; },
        peg$c92 = function(c, e, b) { return { number: line(), line: [c, e, b]}; },
        peg$c93 = function(c, b, c2, e) { return { number: line(), line: [c+c2, e, b]}; },
        peg$c94 = function(c, n, b) { return { number: line(), line: [c, n, b]}; },
        peg$c95 = "=",
        peg$c96 = { type: "literal", value: "=", description: "\"=\"" },
        peg$c97 = function(c, v, a) { return { number: line(), line: [c, v, a]}; },
        peg$c98 = function(c, n) { return { number: line(), line: [c, n]}; },
        peg$c99 = function(c, l) { return { number: line(), line: [c, l]}; },
        peg$c100 = /^[']/,
        peg$c101 = { type: "class", value: "[']", description: "[']" },
        peg$c102 = function(c, s) { return { number: line(), line: [c, s]}; },
        peg$c103 = /^["]/,
        peg$c104 = { type: "class", value: "[\"]", description: "[\"]" },
        peg$c105 = "()",
        peg$c106 = { type: "literal", value: "()", description: "\"()\"" },
        peg$c107 = function(c) { return { number: line(), line: [c]}; },
        peg$c108 = /^[\r\n]/,
        peg$c109 = { type: "class", value: "[\\r\\n]", description: "[\\r\\n]" },
        peg$c110 = "+",
        peg$c111 = { type: "literal", value: "+", description: "\"+\"" },
        peg$c112 = function(left, right) { return ['+', [left, right]]; },
        peg$c113 = "-",
        peg$c114 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c115 = function(left, right) { return ['-', [left, right]]; },
        peg$c116 = "*",
        peg$c117 = { type: "literal", value: "*", description: "\"*\"" },
        peg$c118 = function(left, right) { return ['*', [left, right]]; },
        peg$c119 = "/",
        peg$c120 = { type: "literal", value: "/", description: "\"/\"" },
        peg$c121 = function(left, right) { return ['/', [left, right]]; },
        peg$c122 = /^[ \t]/,
        peg$c123 = { type: "class", value: "[ \\t]", description: "[ \\t]" },
        peg$c124 = "is",
        peg$c125 = { type: "literal", value: "is", description: "\"is\"" },
        peg$c126 = function(n) { return n; },
        peg$c127 = function(v) { return v; },
        peg$c128 = function(f) { return f; },
        peg$c129 = "(",
        peg$c130 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c131 = ")",
        peg$c132 = { type: "literal", value: ")", description: "\")\"" },
        peg$c133 = function(additive) { return additive; },
        peg$c134 = /^[.]/,
        peg$c135 = { type: "class", value: "[.]", description: "[.]" },
        peg$c136 = function(i, p, d) { return Number(i.join("") + (p ? p : '') + d.join("")); },
        peg$c137 = function(i, p, d) { return Number("-" + i.join("") + (p ? p : '') + d.join("")); },
        peg$c138 = function(i) { return Number(i); },
        peg$c139 = function(i) { return Number("-" + i); },
        peg$c140 = /^[0-9]/,
        peg$c141 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c142 = function(digits) { return parseInt(digits.join(""), 10); },
        peg$c143 = "$",
        peg$c144 = { type: "literal", value: "$", description: "\"$\"" },
        peg$c145 = function(n) { return "$" + n.join(""); },
        peg$c146 = function(l) { return "^"+l; },
        peg$c147 = "===",
        peg$c148 = { type: "literal", value: "===", description: "\"===\"" },
        peg$c149 = function() { return '=='; },
        peg$c150 = "==",
        peg$c151 = { type: "literal", value: "==", description: "\"==\"" },
        peg$c152 = "equals",
        peg$c153 = { type: "literal", value: "equals", description: "\"equals\"" },
        peg$c154 = "equal",
        peg$c155 = { type: "literal", value: "equal", description: "\"equal\"" },
        peg$c156 = "to",
        peg$c157 = { type: "literal", value: "to", description: "\"to\"" },
        peg$c158 = "!==",
        peg$c159 = { type: "literal", value: "!==", description: "\"!==\"" },
        peg$c160 = function() { return '!='; },
        peg$c161 = "!=",
        peg$c162 = { type: "literal", value: "!=", description: "\"!=\"" },
        peg$c163 = "not",
        peg$c164 = { type: "literal", value: "not", description: "\"not\"" },
        peg$c165 = "<=",
        peg$c166 = { type: "literal", value: "<=", description: "\"<=\"" },
        peg$c167 = function() { return '<='; },
        peg$c168 = ">=",
        peg$c169 = { type: "literal", value: ">=", description: "\">=\"" },
        peg$c170 = function() { return '>='; },
        peg$c171 = "less",
        peg$c172 = { type: "literal", value: "less", description: "\"less\"" },
        peg$c173 = "than",
        peg$c174 = { type: "literal", value: "than", description: "\"than\"" },
        peg$c175 = function() { return '<'; },
        peg$c176 = "more",
        peg$c177 = { type: "literal", value: "more", description: "\"more\"" },
        peg$c178 = function() { return '>'; },
        peg$c179 = "greater",
        peg$c180 = { type: "literal", value: "greater", description: "\"greater\"" },
        peg$c181 = /^[><]/,
        peg$c182 = { type: "class", value: "[><]", description: "[><]" },
        peg$c183 = function(c) { return c; },
        peg$c184 = function(a1, c, a2) { return [c, a1, a2]; },
        peg$c185 = "{",
        peg$c186 = { type: "literal", value: "{", description: "\"{\"" },
        peg$c187 = "}",
        peg$c188 = { type: "literal", value: "}", description: "\"}\"" },
        peg$c189 = function(i) { return i },
        peg$c190 = function(s) { return s },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parsestart() {
      var s0;

      s0 = peg$parselines();

      return s0;
    }

    function peg$parsecmdWithAssignment() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c0) {
        s0 = peg$c0;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1); }
      }

      return s0;
    }

    function peg$parsecmdWithPercent() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c2) {
        s0 = peg$c2;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c3); }
      }

      return s0;
    }

    function peg$parsecmdWithSeconds() {
      var s0;

      if (input.substr(peg$currPos, 10) === peg$c4) {
        s0 = peg$c4;
        peg$currPos += 10;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c5); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 10) === peg$c6) {
          s0 = peg$c6;
          peg$currPos += 10;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c7); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c8) {
            s0 = peg$c8;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c9); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c10) {
              s0 = peg$c10;
              peg$currPos += 5;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c12) {
                s0 = peg$c12;
                peg$currPos += 2;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c13); }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsecmdWithDegrees() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c14) {
        s0 = peg$c14;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c15); }
      }

      return s0;
    }

    function peg$parsecmdWithPosDegrees() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c16) {
        s0 = peg$c16;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c17); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c18) {
          s0 = peg$c18;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c19); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 8) === peg$c20) {
            s0 = peg$c20;
            peg$currPos += 8;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c21); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c22) {
              s0 = peg$c22;
              peg$currPos += 4;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c23); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsecmdWithHexNumber() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c24) {
        s0 = peg$c24;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c25); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c26) {
          s0 = peg$c26;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c27); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c28) {
            s0 = peg$c28;
            peg$currPos += 5;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c29); }
          }
        }
      }

      return s0;
    }

    function peg$parsecmdWithString() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c30) {
        s0 = peg$c30;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c31); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c32) {
          s0 = peg$c32;
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c33); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c24) {
            s0 = peg$c24;
            peg$currPos += 5;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c25); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c26) {
              s0 = peg$c26;
              peg$currPos += 5;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c27); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 5) === peg$c28) {
                s0 = peg$c28;
                peg$currPos += 5;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c29); }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsecmdWithLabel() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c34) {
        s0 = peg$c34;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c35); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c36) {
          s0 = peg$c36;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c37); }
        }
      }

      return s0;
    }

    function peg$parsecmdBlock() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c38) {
        s0 = peg$c38;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c39); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c40) {
          s0 = peg$c40;
          peg$currPos += 6;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c41); }
        }
      }

      return s0;
    }

    function peg$parsecmdBlockWithLabel() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c42) {
        s0 = peg$c42;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c43); }
      }

      return s0;
    }

    function peg$parsecmdBlockWithExpression() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c44) {
        s0 = peg$c44;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c45); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c46) {
          s0 = peg$c46;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c47); }
        }
      }

      return s0;
    }

    function peg$parsecmdMultiPart1() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c48) {
        s0 = peg$c48;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c49); }
      }

      return s0;
    }

    function peg$parsecmdMultiPart2() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c46) {
        s0 = peg$c46;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c47); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c50) {
          s0 = peg$c50;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c51); }
        }
      }

      return s0;
    }

    function peg$parsecmd() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c12) {
        s0 = peg$c12;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c13); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c52) {
          s0 = peg$c52;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c53); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 10) === peg$c4) {
            s0 = peg$c4;
            peg$currPos += 10;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c5); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 10) === peg$c6) {
              s0 = peg$c6;
              peg$currPos += 10;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c7); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 10) === peg$c54) {
                s0 = peg$c54;
                peg$currPos += 10;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c55); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 7) === peg$c56) {
                  s0 = peg$c56;
                  peg$currPos += 7;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c57); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 8) === peg$c20) {
                    s0 = peg$c20;
                    peg$currPos += 8;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c21); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 4) === peg$c22) {
                      s0 = peg$c22;
                      peg$currPos += 4;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c23); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 9) === peg$c16) {
                        s0 = peg$c16;
                        peg$currPos += 9;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c17); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 5) === peg$c18) {
                          s0 = peg$c18;
                          peg$currPos += 5;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c19); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 7) === peg$c58) {
                            s0 = peg$c58;
                            peg$currPos += 7;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c59); }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseposNumber() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c62.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c63); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c62.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c63); }
          }
        }
      } else {
        s1 = peg$c61;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c64(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsehexNumber() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c65) {
        s1 = peg$c65;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c66); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c67.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c68); }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c67.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c68); }
            }
          }
        } else {
          s2 = peg$c61;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c69(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c61;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c61;
      }

      return s0;
    }

    function peg$parsetimes() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parse__();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c70) {
          s2 = peg$c70;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c71); }
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 115) {
            s3 = peg$c73;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c74); }
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c72;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c61;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c61;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c61;
      }

      return s0;
    }

    function peg$parsepercent() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 37) {
          s2 = peg$c75;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c76); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c61;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c61;
      }

      return s0;
    }

    function peg$parseseconds() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parse__();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c77) {
          s2 = peg$c77;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c78); }
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 115) {
            s3 = peg$c73;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c74); }
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c72;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c61;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c61;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c61;
      }

      return s0;
    }

    function peg$parsedegrees() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parse__();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c79) {
          s2 = peg$c79;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c80); }
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 115) {
            s3 = peg$c73;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c74); }
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c72;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c61;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c61;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c61;
      }

      return s0;
    }

    function peg$parselabel() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (peg$c81.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c82); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c83.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c84); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c83.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c84); }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c85(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c61;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c61;
      }

      return s0;
    }

    function peg$parsestring() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c86.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c87); }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c86.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c87); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c88(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parserootStatement() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsecmdBlockWithLabel();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parselabel();
          if (s3 !== peg$FAILED) {
            s4 = [];
            if (input.charCodeAt(peg$currPos) === 32) {
              s5 = peg$c89;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c90); }
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              if (input.charCodeAt(peg$currPos) === 32) {
                s5 = peg$c89;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c90); }
              }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseblock();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c91(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c61;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c61;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c61;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c61;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c61;
      }

      return s0;
    }

    function peg$parsestatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsecmdBlockWithExpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexpression();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseblock();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c92(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c61;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c61;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c61;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c61;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c61;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsecmdMultiPart1();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseblock();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsecmdMultiPart2();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parse__();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parseexpression();
                    if (s7 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c93(s1, s3, s5, s7);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c61;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c61;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c61;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c61;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c61;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c61;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c61;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsecmdBlock();
          if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (s2 !== peg$FAILED) {
              s3 = peg$parsenumber();
              if (s3 !== peg$FAILED) {
                s4 = peg$parsetimes();
                if (s4 === peg$FAILED) {
                  s4 = peg$c72;
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parse_();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseblock();
                    if (s6 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c94(s1, s3, s6);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c61;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c61;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c61;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c61;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c61;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c61;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsecmdWithAssignment();
            if (s1 !== peg$FAILED) {
              s2 = peg$parse__();
              if (s2 !== peg$FAILED) {
                s3 = peg$parsevariable();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parse_();
                  if (s4 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 61) {
                      s5 = peg$c95;
                      peg$currPos++;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c96); }
                    }
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parse_();
                      if (s6 !== peg$FAILED) {
                        s7 = peg$parseadditive();
                        if (s7 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c97(s1, s3, s7);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c61;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c61;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c61;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c61;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c61;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c61;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c61;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parsecmdWithPercent();
              if (s1 !== peg$FAILED) {
                s2 = peg$parse__();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseposNumber();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parsepercent();
                    if (s4 === peg$FAILED) {
                      s4 = peg$c72;
                    }
                    if (s4 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c98(s1, s3);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c61;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c61;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c61;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c61;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsecmdWithSeconds();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parse__();
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseposNumber();
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parseseconds();
                      if (s4 === peg$FAILED) {
                        s4 = peg$c72;
                      }
                      if (s4 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c98(s1, s3);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c61;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c61;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c61;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c61;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parsecmdWithPosDegrees();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parse__();
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parseposNumber();
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parsedegrees();
                        if (s4 === peg$FAILED) {
                          s4 = peg$c72;
                        }
                        if (s4 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c98(s1, s3);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c61;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c61;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c61;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c61;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parsecmdWithDegrees();
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parse__();
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parsenumber();
                        if (s3 !== peg$FAILED) {
                          s4 = peg$parsedegrees();
                          if (s4 === peg$FAILED) {
                            s4 = peg$c72;
                          }
                          if (s4 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c98(s1, s3);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c61;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c61;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c61;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c61;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parsecmdWithHexNumber();
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parse__();
                        if (s2 !== peg$FAILED) {
                          s3 = peg$parsehexNumber();
                          if (s3 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c98(s1, s3);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c61;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c61;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c61;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parsecmdWithLabel();
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parse__();
                          if (s2 !== peg$FAILED) {
                            s3 = peg$parselabel();
                            if (s3 !== peg$FAILED) {
                              peg$reportedPos = s0;
                              s1 = peg$c99(s1, s3);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c61;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c61;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c61;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parsecmdWithString();
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parse__();
                            if (s2 !== peg$FAILED) {
                              if (peg$c100.test(input.charAt(peg$currPos))) {
                                s3 = input.charAt(peg$currPos);
                                peg$currPos++;
                              } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c101); }
                              }
                              if (s3 !== peg$FAILED) {
                                s4 = peg$parsestring();
                                if (s4 !== peg$FAILED) {
                                  if (peg$c100.test(input.charAt(peg$currPos))) {
                                    s5 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                  } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c101); }
                                  }
                                  if (s5 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c102(s1, s4);
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c61;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c61;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c61;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c61;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c61;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parsecmdWithString();
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parse__();
                              if (s2 !== peg$FAILED) {
                                if (peg$c103.test(input.charAt(peg$currPos))) {
                                  s3 = input.charAt(peg$currPos);
                                  peg$currPos++;
                                } else {
                                  s3 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c104); }
                                }
                                if (s3 !== peg$FAILED) {
                                  s4 = peg$parsestring();
                                  if (s4 !== peg$FAILED) {
                                    if (peg$c103.test(input.charAt(peg$currPos))) {
                                      s5 = input.charAt(peg$currPos);
                                      peg$currPos++;
                                    } else {
                                      s5 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c104); }
                                    }
                                    if (s5 !== peg$FAILED) {
                                      peg$reportedPos = s0;
                                      s1 = peg$c102(s1, s4);
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c61;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c61;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c61;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c61;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c61;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = peg$parsecmd();
                              if (s1 !== peg$FAILED) {
                                if (input.substr(peg$currPos, 2) === peg$c105) {
                                  s2 = peg$c105;
                                  peg$currPos += 2;
                                } else {
                                  s2 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c106); }
                                }
                                if (s2 !== peg$FAILED) {
                                  peg$reportedPos = s0;
                                  s1 = peg$c107(s1);
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c61;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c61;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = peg$parsecmd();
                                if (s1 !== peg$FAILED) {
                                  peg$reportedPos = s0;
                                  s1 = peg$c107(s1);
                                }
                                s0 = s1;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseendline() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c108.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c109); }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c108.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c109); }
            }
          }
        } else {
          s2 = peg$c61;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c61;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c61;
      }

      return s0;
    }

    function peg$parseadditive() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsemultiplicative();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 43) {
          s2 = peg$c110;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c111); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseadditive();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c112(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c61;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c61;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c61;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsemultiplicative();
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 45) {
            s2 = peg$c113;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c114); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseadditive();
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c115(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c61;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c61;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c61;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parsemultiplicative();
        }
      }

      return s0;
    }

    function peg$parsemultiplicative() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseprimary();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 42) {
          s2 = peg$c116;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c117); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsemultiplicative();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c118(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c61;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c61;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c61;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseprimary();
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 47) {
            s2 = peg$c119;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c120); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsemultiplicative();
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c121(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c61;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c61;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c61;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseprimary();
        }
      }

      return s0;
    }

    function peg$parse_() {
      var s0, s1;

      s0 = [];
      if (peg$c122.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c123); }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (peg$c122.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c123); }
        }
      }

      return s0;
    }

    function peg$parse__() {
      var s0, s1;

      s0 = [];
      if (peg$c122.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c123); }
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          if (peg$c122.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c123); }
          }
        }
      } else {
        s0 = peg$c61;
      }

      return s0;
    }

    function peg$parse_is() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c124) {
          s2 = peg$c124;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c125); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c61;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c61;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c61;
      }

      return s0;
    }

    function peg$parseprimary() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsenumber();
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c126(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c61;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c61;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c61;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsevariable();
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c127(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c61;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c61;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c61;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parse_();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsefunction();
            if (s2 !== peg$FAILED) {
              s3 = peg$parse_();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c128(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c61;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c61;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c61;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parse_();
            if (s1 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 40) {
                s2 = peg$c129;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c130); }
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parseadditive();
                if (s3 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s4 = peg$c131;
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c132); }
                  }
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parse_();
                    if (s5 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c133(s3);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c61;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c61;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c61;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c61;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c61;
            }
          }
        }
      }

      return s0;
    }

    function peg$parsenumber() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseinteger();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseinteger();
        }
      } else {
        s1 = peg$c61;
      }
      if (s1 !== peg$FAILED) {
        if (peg$c134.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c135); }
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c72;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseinteger();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseinteger();
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c136(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c61;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c61;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c61;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 45) {
          s1 = peg$c113;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c114); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseinteger();
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseinteger();
            }
          } else {
            s2 = peg$c61;
          }
          if (s2 !== peg$FAILED) {
            if (peg$c134.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c135); }
            }
            if (s3 === peg$FAILED) {
              s3 = peg$c72;
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parseinteger();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parseinteger();
              }
              if (s4 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c137(s2, s3, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c61;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c61;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c61;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c61;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseinteger();
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c138(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 45) {
              s1 = peg$c113;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c114); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseinteger();
              if (s2 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c139(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c61;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c61;
            }
          }
        }
      }

      return s0;
    }

    function peg$parseinteger() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c140.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c141); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c140.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c141); }
          }
        }
      } else {
        s1 = peg$c61;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c142(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsevariable() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 36) {
        s1 = peg$c143;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c144); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c83.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c84); }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c83.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c84); }
            }
          }
        } else {
          s2 = peg$c61;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c145(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c61;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c61;
      }

      return s0;
    }

    function peg$parsefunction() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parselabel();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c105) {
          s2 = peg$c105;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c106); }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c146(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c61;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c61;
      }

      return s0;
    }

    function peg$parsecomparator() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c147) {
          s2 = peg$c147;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c148); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c149();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c61;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c61;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c61;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c150) {
            s2 = peg$c150;
            peg$currPos += 2;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c151); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c149();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c61;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c61;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c61;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parse_();
          if (s1 !== peg$FAILED) {
            if (input.substr(peg$currPos, 6) === peg$c152) {
              s2 = peg$c152;
              peg$currPos += 6;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c153); }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parse__();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c149();
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c61;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c61;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c61;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parse_();
            if (s1 !== peg$FAILED) {
              if (input.substr(peg$currPos, 5) === peg$c154) {
                s2 = peg$c154;
                peg$currPos += 5;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c155); }
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parse__();
                if (s3 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c156) {
                    s4 = peg$c156;
                    peg$currPos += 2;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c157); }
                  }
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parse__();
                    if (s5 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c149();
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c61;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c61;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c61;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c61;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c61;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parse_();
              if (s1 !== peg$FAILED) {
                if (input.substr(peg$currPos, 3) === peg$c158) {
                  s2 = peg$c158;
                  peg$currPos += 3;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c159); }
                }
                if (s2 !== peg$FAILED) {
                  s3 = peg$parse_();
                  if (s3 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c160();
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c61;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c61;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c61;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parse_();
                if (s1 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c161) {
                    s2 = peg$c161;
                    peg$currPos += 2;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c162); }
                  }
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parse_();
                    if (s3 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c160();
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c61;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c61;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c61;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parse_();
                  if (s1 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 3) === peg$c163) {
                      s2 = peg$c163;
                      peg$currPos += 3;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c164); }
                    }
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parse__();
                      if (s3 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 6) === peg$c152) {
                          s4 = peg$c152;
                          peg$currPos += 6;
                        } else {
                          s4 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c153); }
                        }
                        if (s4 !== peg$FAILED) {
                          s5 = peg$parse__();
                          if (s5 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c160();
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c61;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c61;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c61;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c61;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c61;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parse_();
                    if (s1 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 3) === peg$c163) {
                        s2 = peg$c163;
                        peg$currPos += 3;
                      } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c164); }
                      }
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parse__();
                        if (s3 !== peg$FAILED) {
                          if (input.substr(peg$currPos, 5) === peg$c154) {
                            s4 = peg$c154;
                            peg$currPos += 5;
                          } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c155); }
                          }
                          if (s4 !== peg$FAILED) {
                            s5 = peg$parse__();
                            if (s5 !== peg$FAILED) {
                              if (input.substr(peg$currPos, 2) === peg$c156) {
                                s6 = peg$c156;
                                peg$currPos += 2;
                              } else {
                                s6 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c157); }
                              }
                              if (s6 !== peg$FAILED) {
                                s7 = peg$parse__();
                                if (s7 !== peg$FAILED) {
                                  peg$reportedPos = s0;
                                  s1 = peg$c160();
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c61;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c61;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c61;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c61;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c61;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c61;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c61;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parse_();
                      if (s1 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c165) {
                          s2 = peg$c165;
                          peg$currPos += 2;
                        } else {
                          s2 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c166); }
                        }
                        if (s2 !== peg$FAILED) {
                          s3 = peg$parse_();
                          if (s3 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c167();
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c61;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c61;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c61;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parse_();
                        if (s1 !== peg$FAILED) {
                          if (input.substr(peg$currPos, 2) === peg$c168) {
                            s2 = peg$c168;
                            peg$currPos += 2;
                          } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c169); }
                          }
                          if (s2 !== peg$FAILED) {
                            s3 = peg$parse_();
                            if (s3 !== peg$FAILED) {
                              peg$reportedPos = s0;
                              s1 = peg$c170();
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c61;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c61;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c61;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parse_();
                          if (s1 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 4) === peg$c171) {
                              s2 = peg$c171;
                              peg$currPos += 4;
                            } else {
                              s2 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c172); }
                            }
                            if (s2 !== peg$FAILED) {
                              s3 = peg$parse__();
                              if (s3 !== peg$FAILED) {
                                if (input.substr(peg$currPos, 4) === peg$c173) {
                                  s4 = peg$c173;
                                  peg$currPos += 4;
                                } else {
                                  s4 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c174); }
                                }
                                if (s4 !== peg$FAILED) {
                                  s5 = peg$parse__();
                                  if (s5 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c175();
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c61;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c61;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c61;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c61;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c61;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parse_();
                            if (s1 !== peg$FAILED) {
                              if (input.substr(peg$currPos, 4) === peg$c176) {
                                s2 = peg$c176;
                                peg$currPos += 4;
                              } else {
                                s2 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c177); }
                              }
                              if (s2 !== peg$FAILED) {
                                s3 = peg$parse__();
                                if (s3 !== peg$FAILED) {
                                  if (input.substr(peg$currPos, 4) === peg$c173) {
                                    s4 = peg$c173;
                                    peg$currPos += 4;
                                  } else {
                                    s4 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c174); }
                                  }
                                  if (s4 !== peg$FAILED) {
                                    s5 = peg$parse__();
                                    if (s5 !== peg$FAILED) {
                                      peg$reportedPos = s0;
                                      s1 = peg$c178();
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c61;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c61;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c61;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c61;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c61;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = peg$parse_();
                              if (s1 !== peg$FAILED) {
                                if (input.substr(peg$currPos, 7) === peg$c179) {
                                  s2 = peg$c179;
                                  peg$currPos += 7;
                                } else {
                                  s2 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c180); }
                                }
                                if (s2 !== peg$FAILED) {
                                  s3 = peg$parse__();
                                  if (s3 !== peg$FAILED) {
                                    if (input.substr(peg$currPos, 4) === peg$c173) {
                                      s4 = peg$c173;
                                      peg$currPos += 4;
                                    } else {
                                      s4 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c174); }
                                    }
                                    if (s4 !== peg$FAILED) {
                                      s5 = peg$parse__();
                                      if (s5 !== peg$FAILED) {
                                        peg$reportedPos = s0;
                                        s1 = peg$c178();
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c61;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c61;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c61;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c61;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c61;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = peg$parse_();
                                if (s1 !== peg$FAILED) {
                                  if (peg$c181.test(input.charAt(peg$currPos))) {
                                    s2 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                  } else {
                                    s2 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c182); }
                                  }
                                  if (s2 !== peg$FAILED) {
                                    s3 = peg$parse_();
                                    if (s3 !== peg$FAILED) {
                                      peg$reportedPos = s0;
                                      s1 = peg$c183(s2);
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c61;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c61;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c61;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseexpression() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseadditive();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_is();
        if (s2 === peg$FAILED) {
          s2 = peg$c72;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecomparator();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseadditive();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c184(s1, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c61;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c61;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c61;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c61;
      }

      return s0;
    }

    function peg$parseblock() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c185;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c186); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseendline();
        if (s2 === peg$FAILED) {
          s2 = peg$c72;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseblockLine();
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parseblockLine();
            }
          } else {
            s3 = peg$c61;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s5 = peg$c187;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c188); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseendline();
                if (s6 === peg$FAILED) {
                  s6 = peg$c72;
                }
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c189(s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c61;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c61;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c61;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c61;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c61;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c61;
      }

      return s0;
    }

    function peg$parseblockLine() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsestatement();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseendline();
          if (s3 === peg$FAILED) {
            s3 = peg$c72;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c190(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c61;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c61;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c61;
      }

      return s0;
    }

    function peg$parserootLine() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        s2 = peg$parserootStatement();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseendline();
          if (s3 === peg$FAILED) {
            s3 = peg$c72;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c190(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c61;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c61;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c61;
      }

      return s0;
    }

    function peg$parseline() {
      var s0;

      s0 = peg$parseblockLine();
      if (s0 === peg$FAILED) {
        s0 = peg$parserootLine();
      }

      return s0;
    }

    function peg$parselines() {
      var s0, s1;

      s0 = [];
      s1 = peg$parseline();
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parseline();
      }

      return s0;
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();
